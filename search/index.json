[{"content":"","date":"2025-02-12T18:15:26+08:00","permalink":"https://lu-hongcheng.github.io/p/go-openai/","title":"Go-Openai"},{"content":"karpor 云原生结合大模型\n最近在 karpor 源码，对于他怎么结合大模型的手法比较感兴趣，读读源码，总结一下。\nserver 连接大模型 启动路由时会调用 NewAIManager pkg/core/manager/ai/manager.go:27\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 type AIManager struct { client ai.AIProvider } // NewAIManager returns a new AIManager object func NewAIManager(c registry.ExtraConfig) (*AIManager, error) { if c.AIAuthToken == \u0026#34;\u0026#34; { return nil, ErrMissingAuthToken } aiClient := ai.NewClient(c.AIBackend) if err := aiClient.Configure(ai.ConvertToAIConfig(c)); err != nil { return nil, err } return \u0026amp;AIManager{ client: aiClient, }, nil } AIProvider 接口如下，只要定义满足该接口的大模型 Client 都可以接入 karpor\n1 2 3 4 5 6 7 8 9 10 11 12 // AIProvider is an interface all AI clients. type AIProvider interface { // Configure sets up the AI service with the provided configuration. Configure(config AIConfig) error // Generate generates a response from the AI service based on // the provided prompt and service type. Generate(ctx context.Context, prompt string) (string, error) // GenerateStream generates a streaming response from the AI service // based on the provided prompt. It returns a channel that will receive // chunks of the response as they are generated. GenerateStream(ctx context.Context, prompt string) (\u0026lt;-chan string, error) } 以 openai client 为例 pkg/infra/ai/openai.go:31 配置客户端\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func (c *OpenAIClient) Configure(cfg AIConfig) error { defaultConfig := openai.DefaultConfig(cfg.AuthToken) if cfg.BaseURL != \u0026#34;\u0026#34; { defaultConfig.BaseURL = cfg.BaseURL } if cfg.ProxyEnabled { defaultConfig.HTTPClient.Transport = GetProxyHTTPClient(cfg) } client := openai.NewClientWithConfig(defaultConfig) if client == nil { return errors.New(\u0026#34;error creating OpenAI client\u0026#34;) } c.client = client c.model = cfg.Model c.temperature = cfg.Temperature c.topP = cfg.TopP return nil } 大模型生成回答 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func (c *OpenAIClient) Generate(ctx context.Context, prompt string) (string, error) { resp, err := c.client.CreateChatCompletion(ctx, openai.ChatCompletionRequest{ Model: c.model, Messages: []openai.ChatCompletionMessage{ { Role: openai.ChatMessageRoleUser, Content: prompt, }, }, Temperature: c.temperature, TopP: c.topP, }) if err != nil { return \u0026#34;\u0026#34;, err } if len(resp.Choices) == 0 { return \u0026#34;\u0026#34;, errors.New(\u0026#34;no completion choices returned from response\u0026#34;) } return resp.Choices[0].Message.Content, nil } 流式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 func (c *OpenAIClient) GenerateStream(ctx context.Context, prompt string) (\u0026lt;-chan string, error) { // Create chat completion stream with streaming enabled stream, err := c.client.CreateChatCompletionStream(ctx, openai.ChatCompletionRequest{ Model: c.model, Messages: []openai.ChatCompletionMessage{ { Role: openai.ChatMessageRoleUser, Content: prompt, }, }, Temperature: c.temperature, TopP: c.topP, Stream: true, }) if err != nil { return nil, err } // Create buffered channel for response chunks resultChan := make(chan string, 100) // Start goroutine to handle streaming response go func() { defer close(resultChan) defer stream.Close() for { response, err := stream.Recv() if err != nil { if err.Error() == \u0026#34;EOF\u0026#34; { return } // Send error as a special message resultChan \u0026lt;- \u0026#34;ERROR: \u0026#34; + err.Error() return } // Send non-empty content chunks if len(response.Choices) \u0026gt; 0 { chunk := response.Choices[0].Delta.Content if chunk != \u0026#34;\u0026#34; { resultChan \u0026lt;- chunk } } } }() return resultChan, nil } 大模型调用流程 以 Pod 日志诊断为例\n请求路由会调用函数 DiagnoseLogs\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // DiagnoseLogs analyzes pod logs using LLM and returns diagnostic information through a streaming channel func (a *AIManager) DiagnoseLogs(ctx context.Context, logs []string, language string, eventChan chan\u0026lt;- *DiagnosisEvent) error { defer close(eventChan) // Combine logs into a single string, limited to last 1000 lines if len(logs) \u0026gt; 1000 { logs = logs[len(logs)-1000:] } logsStr := strings.Join(logs, \u0026#34;\\n\u0026#34;) // Send start event eventChan \u0026lt;- \u0026amp;DiagnosisEvent{ Type: \u0026#34;start\u0026#34;, Content: \u0026#34;Starting log analysis...\u0026#34;, } // Get prompt template and add language instruction servicePrompt := ServicePromptMap[LogDiagnosisType] if language == \u0026#34;\u0026#34; { language = \u0026#34;English\u0026#34; } prompt := fmt.Sprintf(servicePrompt, language, logsStr) // Generate diagnosis using LLM with streaming stream, err := a.client.GenerateStream(ctx, prompt) if err != nil { errEvent := \u0026amp;DiagnosisEvent{ Type: \u0026#34;error\u0026#34;, Content: fmt.Sprintf(\u0026#34;Failed to analyze logs: %v\u0026#34;, err), } eventChan \u0026lt;- errEvent return fmt.Errorf(\u0026#34;failed to generate log diagnosis: %v\u0026#34;, err) } var fullContent strings.Builder for chunk := range stream { if strings.HasPrefix(chunk, \u0026#34;ERROR:\u0026#34;) { errEvent := \u0026amp;DiagnosisEvent{ Type: \u0026#34;error\u0026#34;, Content: fmt.Sprintf(\u0026#34;Failed to receive diagnosis: %v\u0026#34;, strings.TrimPrefix(chunk, \u0026#34;ERROR: \u0026#34;)), } eventChan \u0026lt;- errEvent return fmt.Errorf(\u0026#34;failed to receive diagnosis chunk: %v\u0026#34;, chunk) } fullContent.WriteString(chunk) eventChan \u0026lt;- \u0026amp;DiagnosisEvent{ Type: \u0026#34;chunk\u0026#34;, Content: chunk, } } // Send complete event eventChan \u0026lt;- \u0026amp;DiagnosisEvent{ Type: \u0026#34;complete\u0026#34;, Content: fullContent.String(), } return nil } 感觉比较简洁明了，没有用到我以为比较复杂的 agent 功能，仅仅使用了大模型的 prompt 功能，可能是因为只需要大模型对日志进行分析，不需要更复杂的处理（可能大模型最主要的就是调 prompt 🤣）。（后续看下 k8sGPT，一般是怎么做的）\n","date":"2025-02-12T17:06:43+08:00","permalink":"https://lu-hongcheng.github.io/p/karpor/","title":"Karpor"},{"content":"go-chi 相比 gin 更加轻量简洁、高度可定制化\ngo get github.com/go-chi/chi/v5\n简单示例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/go-chi/chi/middleware\u0026#34; \u0026#34;github.com/go-chi/chi/v5\u0026#34; ) func main() { // 创建一个新的 Router r := chi.NewRouter() // 使用中间件，日志输出请求 r.Use(middleware.Logger) // 定义路由和处理函数 r.Get(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintln(w, \u0026#34;Hello, World!\u0026#34;) }) r.Get(\u0026#34;/hello/{name}\u0026#34;, func(w http.ResponseWriter, r *http.Request) { name := chi.URLParam(r, \u0026#34;name\u0026#34;) fmt.Fprintf(w, \u0026#34;Hello, %s!\\n\u0026#34;, name) }) // 启动 Web 服务器 http.ListenAndServe(\u0026#34;:8080\u0026#34;, r) } 组路由 1 2 3 4 5 6 7 8 r.Route(\u0026#34;/admin\u0026#34;, func(r chi.Router) { r.Get(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintln(w, \u0026#34;Admin Home\u0026#34;) }) r.Get(\u0026#34;/users\u0026#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintln(w, \u0026#34;List of users\u0026#34;) }) }) 学习下开源项目 karpor 怎么写的 pkg/core/route/route.go:111\n1 2 3 4 5 6 7 8 9 10 11 // Set up the API routes for version 1 of the API. router.Route(\u0026#34;/rest-api/v1\u0026#34;, func(r chi.Router) { setupRestAPIV1(r, aiMgr, clusterMgr, insightMgr, resourceGroupMgr, searchMgr, searchStorage, genericConfig) }) 我们只关注 aiMgr 的相关操作\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func setupRestAPIV1( r chi.Router, aiMgr *aimanager.AIManager, ...... searchStorage storage.SearchStorage, genericConfig *genericapiserver.CompletedConfig, ) { ...... r.Route(\u0026#34;/search\u0026#34;, func(r chi.Router) { r.Get(\u0026#34;/\u0026#34;, searchhandler.SearchForResource(searchMgr, aiMgr, searchStorage)) }) // 路由组里套路由组 r.Route(\u0026#34;/insight\u0026#34;, func(r chi.Router) { r.Get(\u0026#34;/stats\u0026#34;, statshandler.GetStatistics(insightMgr)) r.Get(\u0026#34;/audit\u0026#34;, scannerhandler.Audit(insightMgr)) r.Get(\u0026#34;/score\u0026#34;, scannerhandler.Score(insightMgr)) r.Get(\u0026#34;/topology\u0026#34;, topologyhandler.GetTopology(clusterMgr, insightMgr, genericConfig)) r.Get(\u0026#34;/summary\u0026#34;, summaryhandler.GetSummary(insightMgr, genericConfig)) r.Get(\u0026#34;/events\u0026#34;, eventshandler.GetEvents(insightMgr, genericConfig)) r.Get(\u0026#34;/detail\u0026#34;, detailhandler.GetDetail(clusterMgr, insightMgr, genericConfig)) r.Get(\u0026#34;/aggregator/log/pod/{cluster}/{namespace}/{name}\u0026#34;, aggregatorhandler.GetPodLogs(clusterMgr, genericConfig)) r.Get(\u0026#34;/aggregator/event/{cluster}/{namespace}/{name}\u0026#34;, aggregatorhandler.GetEvents(clusterMgr, genericConfig)) r.Post(\u0026#34;/aggregator/log/diagnosis/stream\u0026#34;, aggregatorhandler.DiagnosePodLogs(aiMgr, genericConfig)) r.Post(\u0026#34;/aggregator/event/diagnosis/stream\u0026#34;, aggregatorhandler.DiagnoseEvents(aiMgr, genericConfig)) r.Post(\u0026#34;/yaml/interpret/stream\u0026#34;, detailhandler.InterpretYAML(aiMgr, genericConfig)) r.Post(\u0026#34;/issue/interpret/stream\u0026#34;, scannerhandler.InterpretIssues(aiMgr, genericConfig)) }) ....... } http 处理函数 pkg/core/handler/aggregator/log.go:222 看看 karpor 诊断 pod 日志怎么写的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // DiagnosePodLogs returns an HTTP handler function that performs AI diagnosis on pod logs // // @Summary Diagnose pod logs using AI // @Description This endpoint analyzes pod logs using AI to identify issues and provide solutions // @Tags insight // @Accept json // @Produce text/event-stream // @Param request body DiagnoseRequest true \u0026#34;The logs to analyze\u0026#34; // @Success 200 {object} ai.DiagnosisEvent // @Failure 400 {string} string \u0026#34;Bad Request\u0026#34; // @Failure 500 {string} string \u0026#34;Internal Server Error\u0026#34; // @Router /insight/aggregator/log/diagnosis/stream [post] func DiagnosePodLogs(aiMgr *ai.AIManager, c *server.CompletedConfig) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { ctx := r.Context() logger := ctxutil.GetLogger(ctx) if err := ai.CheckAIManager(aiMgr); err != nil { logger.Error(err, \u0026#34;AI manager is not available\u0026#34;) http.Error(w, \u0026#34;AI service is not available\u0026#34;, http.StatusServiceUnavailable) return } // Parse request body var req DiagnoseRequest if err := json.NewDecoder(r.Body).Decode(\u0026amp;req); err != nil { http.Error(w, \u0026#34;invalid request body\u0026#34;, http.StatusBadRequest) return } // Set headers for SSE w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/event-stream\u0026#34;) w.Header().Set(\u0026#34;Cache-Control\u0026#34;, \u0026#34;no-cache\u0026#34;) w.Header().Set(\u0026#34;Connection\u0026#34;, \u0026#34;keep-alive\u0026#34;) w.Header().Set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;) w.Header().Set(\u0026#34;X-Accel-Buffering\u0026#34;, \u0026#34;no\u0026#34;) flusher, ok := w.(http.Flusher) if !ok { http.Error(w, \u0026#34;Streaming unsupported\u0026#34;, http.StatusInternalServerError) return } // Create channel for diagnosis events eventChan := make(chan *ai.DiagnosisEvent, 10) go func() { if err := aiMgr.DiagnoseLogs(ctx, req.Logs, req.Language, eventChan); err != nil { // Error already sent through eventChan return } }() // Stream events to client for event := range eventChan { data, err := json.Marshal(event) if err != nil { logger.Error(err, \u0026#34;Failed to marshal diagnosis event\u0026#34;) continue } fmt.Fprintf(w, \u0026#34;data: %s\\n\\n\u0026#34;, data) flusher.Flush() } } } 参数处理 上面代码是对 JSON 请求体参数进行处理\n1 2 3 4 5 6 7 8 9 10 11 12 // DiagnoseRequest represents the request body for log diagnosis type DiagnoseRequest struct { Logs []string `json:\u0026#34;logs\u0026#34;` Language string `json:\u0026#34;language\u0026#34;` // Language code for AI response } // Parse request body var req DiagnoseRequest if err := json.NewDecoder(r.Body).Decode(\u0026amp;req); err != nil { http.Error(w, \u0026#34;invalid request body\u0026#34;, http.StatusBadRequest) return } 常见的还有路径参数和查询参数，例如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 // /hello/jack r.Get(\u0026#34;/hello/{name}\u0026#34;, func(w http.ResponseWriter, r *http.Request) { // 提取路径参数 `name` name := chi.URLParam(r, \u0026#34;name\u0026#34;) fmt.Fprintf(w, \u0026#34;Hello, %s!\\n\u0026#34;, name) }) // /search?q=xxx r.Get(\u0026#34;/search\u0026#34;, func(w http.ResponseWriter, r *http.Request) { // 提取查询参数 `q` query := r.URL.Query().Get(\u0026#34;q\u0026#34;) fmt.Fprintf(w, \u0026#34;Search query: %s\\n\u0026#34;, query) }) 处理响应 SSE 流式响应 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // Set headers for SSE w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/event-stream\u0026#34;) w.Header().Set(\u0026#34;Cache-Control\u0026#34;, \u0026#34;no-cache\u0026#34;) w.Header().Set(\u0026#34;Connection\u0026#34;, \u0026#34;keep-alive\u0026#34;) w.Header().Set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;) w.Header().Set(\u0026#34;X-Accel-Buffering\u0026#34;, \u0026#34;no\u0026#34;) flusher, ok := w.(http.Flusher) if !ok { http.Error(w, \u0026#34;Streaming unsupported\u0026#34;, http.StatusInternalServerError) return } // Create channel for diagnosis events eventChan := make(chan *ai.DiagnosisEvent, 10) go func() { if err := aiMgr.DiagnoseLogs(ctx, req.Logs, req.Language, eventChan); err != nil { // Error already sent through eventChan return } }() // Stream events to client for event := range eventChan { data, err := json.Marshal(event) if err != nil { logger.Error(err, \u0026#34;Failed to marshal diagnosis event\u0026#34;) continue } fmt.Fprintf(w, \u0026#34;data: %s\\n\\n\u0026#34;, data) flusher.Flush() } JSON 响应 更常用的还是 json 响应，使用 go-chi/render 中间件 go get github.com/go-chi/render\n1 2 3 4 5 6 7 8 9 10 11 12 // SuccessRender renders a success response and status code and respond to the // client request. func SuccessRender(ctx context.Context, w http.ResponseWriter, r *http.Request, data any) { render.Status(r, http.StatusOK) respRender := successResponse(ctx, data) render.JSON(w, r, respRender) } // successResponse creates a response renderer for a successful request. func successResponse(ctx context.Context, data any) render.Renderer { return Response(ctx, data, nil, http.StatusOK) } 标准 API 响应渲染\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // response defines the structure for API response payloads. type response struct { Success bool `json:\u0026#34;success\u0026#34; yaml:\u0026#34;success\u0026#34;` // Indicates success status. Message string `json:\u0026#34;message\u0026#34; yaml:\u0026#34;message\u0026#34;` // Descriptive message. Data any `json:\u0026#34;data,omitempty\u0026#34; yaml:\u0026#34;data,omitempty\u0026#34;` // Data payload. TraceID string `json:\u0026#34;traceID,omitempty\u0026#34; yaml:\u0026#34;traceID,omitempty\u0026#34;` // Trace identifier. StartTime *time.Time `json:\u0026#34;startTime,omitempty\u0026#34; yaml:\u0026#34;startTime,omitempty\u0026#34;` // Request start time. EndTime *time.Time `json:\u0026#34;endTime,omitempty\u0026#34; yaml:\u0026#34;endTime,omitempty\u0026#34;` // Request end time. CostTime Duration `json:\u0026#34;costTime,omitempty\u0026#34; yaml:\u0026#34;costTime,omitempty\u0026#34;` // Time taken for the request. } // Response creates a standard API response renderer. func Response(ctx context.Context, data any, err error, statusCode int) render.Renderer { resp := \u0026amp;response{} // Set the Message and Data fields based on the error parameter. if err == nil { resp.Message = SuccessMessage resp.Data = data } else { resp.Message = err.Error() } // Set the Success fields based on the error and statusCode parameters. if err == nil || statusCode == http.StatusNotFound { resp.Success = true } else { resp.Success = false } // Include the request trace ID if available. if requestID := middleware.GetReqID(ctx); len(requestID) \u0026gt; 0 { resp.TraceID = requestID } // Calculate and include timing details if a start time is set. if startTime := appmiddleware.GetStartTime(ctx); !startTime.IsZero() { endTime := time.Now() resp.StartTime = \u0026amp;startTime resp.EndTime = \u0026amp;endTime resp.CostTime = Duration(endTime.Sub(startTime)) } return resp } ","date":"2025-02-12T12:58:07+08:00","permalink":"https://lu-hongcheng.github.io/p/go-chi/","title":"Go Chi"},{"content":" 官方教程 https://cobra.dev/\ncobra-cli 命令行使用\n1 2 3 4 5 mkdir mycli \u0026amp;\u0026amp; cd mycli go mod init mycli cobra-cli init [--author \u0026#34;lu-hongcheng\u0026#34; --license mit] cobra-cli add say cobra add hello -p sayCmd 这种方式文件结构比较固定，一般我还是采用手撸的方式\n以云原生项目 karpor 为例\n1. 项目启动 cmd/karpor/main.go:31\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/KusionStack/karpor/cmd/karpor/app\u0026#34; genericapiserver \u0026#34;k8s.io/apiserver/pkg/server\u0026#34; \u0026#34;k8s.io/component-base/cli\u0026#34; ) func main() { ctx := genericapiserver.SetupSignalContext() cmd := app.NewServerCommand(ctx) syncCmd := app.NewSyncerCommand(ctx) cmd.AddCommand(syncCmd) code := cli.Run(cmd) os.Exit(code) } SetupSignalContext 返回 context，接受信号 SIGTERM 和 SIGINT 时被取消\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var onlyOneSignalHandler = make(chan struct{}) func SetupSignalContext() context.Context { close(onlyOneSignalHandler) // panics when called twice shutdownHandler = make(chan os.Signal, 2) ctx, cancel := context.WithCancel(context.Background()) signal.Notify(shutdownHandler, shutdownSignals...) go func() { \u0026lt;-shutdownHandler cancel() \u0026lt;-shutdownHandler os.Exit(1) // second signal. Exit directly. }() return ctx } 这其实和很多后端项目的起手式一样\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 func (a *App) Run(ctx context.Context) error { ctx, cancel := context.WithCancel(ctx) defer cancel() signals := make(chan os.Signal, 1) signal.Notify(signals, syscall.SIGINT, syscall.SIGTERM) for _, srv := range a.servers { go func(srv server.Server) { err := srv.Start(ctx) if err != nil { log.Printf(\u0026#34;Server start err: %v\u0026#34;, err) } }(srv) } select { case \u0026lt;-signals: // Received termination signal log.Println(\u0026#34;Received termination signal\u0026#34;) case \u0026lt;-ctx.Done(): // Context canceled log.Println(\u0026#34;Context canceled\u0026#34;) } // Gracefully stop the servers for _, srv := range a.servers { err := srv.Stop(ctx) if err != nil { log.Printf(\u0026#34;Server stop err: %v\u0026#34;, err) } } return nil } 2. 创建命令 ok 获得了 ctx，调用 app.NewServerCommand(ctx) 创建一个新的服务器命令\ncmd/karpor/app/server.go:97\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 func NewServerCommand(ctx context.Context) *cobra.Command { o, err := NewOptions(os.Stdout, os.Stderr) if err != nil { klog.Background().Error(err, \u0026#34;Unable to initialize command options\u0026#34;) klog.FlushAndExit(klog.ExitFlushTimeout, 1) } expvar.Publish(\u0026#34;CoreOptions\u0026#34;, expvar.Func(func() interface{} { return o.CoreOptions })) expvar.Publish(\u0026#34;StorageOptions\u0026#34;, expvar.Func(func() interface{} { return o.SearchStorageOptions })) expvar.Publish(\u0026#34;AIOptions\u0026#34;, expvar.Func(func() interface{} { displayOpts := *o.AIOptions displayOpts.AIAuthToken = \u0026#34;[hidden]\u0026#34; return \u0026amp;displayOpts })) expvar.Publish(\u0026#34;Version\u0026#34;, expvar.Func(func() interface{} { return version.GetVersion() })) cmd := \u0026amp;cobra.Command{ Use: \u0026#34;karpor\u0026#34;, Short: \u0026#34;Launch an API server\u0026#34;, Long: \u0026#34;Launch an API server\u0026#34;, RunE: func(c *cobra.Command, args []string) error { if o.CoreOptions.Version { fmt.Println(version.GetVersion()) return nil } if err := o.Complete(); err != nil { return err } if err := o.Validate(args); err != nil { return err } if err := o.RunServer(ctx.Done()); err != nil { return err } return nil }, } o.AddFlags(cmd.Flags()) return cmd } 创建 option -\u0026gt; 补全 option -\u0026gt; 校验 option -\u0026gt; 用 option 启动 server （和 k8s-apiserver 代码格式一模一样）\nAIOptions 配置 这里看一下怎么配置 AIOption 的，我对这方面比较感兴趣 cmd/karpor/app/options/ai.go:43 创建 AIOptions\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 type AIOptions struct { AIBackend string AIAuthToken string AIBaseURL string AIModel string AITemperature float32 AITopP float32 // proxy options AIProxyEnabled bool AIHTTPProxy string AIHTTPSProxy string AINoProxy string } func NewAIOptions() *AIOptions { return \u0026amp;AIOptions{} } 参数和标志 参数 ： go run main.go add 3 5 args 数组将会包含以下内容 args := []string{\u0026quot;3\u0026quot;, \u0026quot;5\u0026quot;}，这个很少用，一般使用命令标志。\ncmd/karpor/app/options/ai.go:67\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 o.AIOptions.AddFlags(fs) // AddFlags adds flags for a specific Option to the specified FlagSet func (o *AIOptions) AddFlags(fs *pflag.FlagSet) { if o == nil { return } fs.StringVar(\u0026amp;o.AIBackend, \u0026#34;ai-backend\u0026#34;, defaultBackend, \u0026#34;The ai backend\u0026#34;) fs.StringVar(\u0026amp;o.AIAuthToken, \u0026#34;ai-auth-token\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;The ai auth token\u0026#34;) fs.StringVar(\u0026amp;o.AIBaseURL, \u0026#34;ai-base-url\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;The ai base url\u0026#34;) fs.StringVar(\u0026amp;o.AIModel, \u0026#34;ai-model\u0026#34;, defaultModel, \u0026#34;The ai model\u0026#34;) fs.Float32Var(\u0026amp;o.AITemperature, \u0026#34;ai-temperature\u0026#34;, defaultTemperature, \u0026#34;The ai temperature\u0026#34;) fs.Float32Var(\u0026amp;o.AITopP, \u0026#34;ai-top-p\u0026#34;, defaultTopP, \u0026#34;The ai top-p\u0026#34;) fs.BoolVar(\u0026amp;o.AIProxyEnabled, \u0026#34;ai-proxy-enabled\u0026#34;, false, \u0026#34;The ai proxy enable\u0026#34;) fs.StringVar(\u0026amp;o.AIHTTPProxy, \u0026#34;ai-http-proxy\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;The ai http proxy\u0026#34;) fs.StringVar(\u0026amp;o.AIHTTPSProxy, \u0026#34;ai-https-proxy\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;The ai https proxy\u0026#34;) fs.StringVar(\u0026amp;o.AINoProxy, \u0026#34;ai-no-proxy\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;The ai no-proxy\u0026#34;) } 3. 运行命令 然后创建子命令 syncCmd 添加到 rootCmd 中 cmd.AddCommand(syncCmd)\n1 2 code := cli.Run(cmd) os.Exit(code) 这个写法也很典型，它确保日志记录已正确设置。在日志记录设置之前，它将错误作为纯文本打印到标准错误输出。这涵盖了命令行标志解析错误和未知命令。之后，它会使用 klog 记录这些错误，这涵盖了运行时错误。\n","date":"2025-02-11T16:49:44+08:00","permalink":"https://lu-hongcheng.github.io/p/cobra-in-%E4%BA%91%E5%8E%9F%E7%94%9F/","title":"Cobra in 云原生"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n分类 1 2 3 4 5 6 7 8 9 10 tags = [ \u0026#34;markdown\u0026#34;, \u0026#34;css\u0026#34;, \u0026#34;html\u0026#34;, \u0026#34;themes\u0026#34;, ] categories = [ \u0026#34;themes\u0026#34;, \u0026#34;syntax\u0026#34;, ] Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nInline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$Press CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image 图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://lu-hongcheng.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://lu-hongcheng.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]